{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"isobar-ext isobar-ext is a Python library for creating and manipulating musical patterns, designed for use in algorithmic composition, generative music and sonification. It makes it quick and easy to express complex musical ideas, and can send and receive events from various different sources: MIDI, OSC, SocketIO, and .mid files. What isobar-ext does The core objective of isobar-ext is to provide a framework for sequencing and triggering events, which may be MIDI messages, OSC events, triggers for third-party DSP engines such as SuperCollider , or even Python functions. ( What types of event are supported? ) It can be used to trigger events in real time, or to generate patterns that can be serialised as MIDI files and loaded into a DAW. It can sync to external clocks, or act as a clock source to external devices. It can also load patterns serialised in MIDI files for processing. What isobar-ext doesn't do isobar-ext does not generate any audio on its own. It must be configured to send events to an output device which is responsible for sound synthesis. Basic concepts There are a few key components in isobar-ext. The Timeline handles timing and scheduling, triggering events at the correct moment. It is made up of multiple Tracks, which normally . It can maintain its own clock with millisecond accuracy, or sync to an external clock. Events correspond to triggers that are typically sent to output devices or received from input devices. These may be MIDI notes, control changes, OSC triggers, and other general types. An event is typically described by a dict with a number of properties. For example: { \"note\" : 60, \"amplitude\": 127 } Patterns : Each of the properties of an event can be specified by a Pattern, which generates a sequence of return values. Simple pattern types generate fixed sequences, random values, or values based on statistical models. Patterns can be passed other patterns as parameters, so they can operate on each other -- for example, causing an input pattern to loop N times, or skipping the input values with some probability. Devices : Events are sent to output devices, over interfaces such as MIDI or OSC. Events can also be received and processed. Flow diagram Documentation Getting started Code examples Pattern library reference","title":"Home"},{"location":"#isobar-ext","text":"isobar-ext is a Python library for creating and manipulating musical patterns, designed for use in algorithmic composition, generative music and sonification. It makes it quick and easy to express complex musical ideas, and can send and receive events from various different sources: MIDI, OSC, SocketIO, and .mid files.","title":"isobar-ext"},{"location":"#what-isobar-does","text":"The core objective of isobar-ext is to provide a framework for sequencing and triggering events, which may be MIDI messages, OSC events, triggers for third-party DSP engines such as SuperCollider , or even Python functions. ( What types of event are supported? ) It can be used to trigger events in real time, or to generate patterns that can be serialised as MIDI files and loaded into a DAW. It can sync to external clocks, or act as a clock source to external devices. It can also load patterns serialised in MIDI files for processing.","title":"What isobar-ext does"},{"location":"#what-isobar-doesnt-do","text":"isobar-ext does not generate any audio on its own. It must be configured to send events to an output device which is responsible for sound synthesis.","title":"What isobar-ext doesn't do"},{"location":"#basic-concepts","text":"There are a few key components in isobar-ext. The Timeline handles timing and scheduling, triggering events at the correct moment. It is made up of multiple Tracks, which normally . It can maintain its own clock with millisecond accuracy, or sync to an external clock. Events correspond to triggers that are typically sent to output devices or received from input devices. These may be MIDI notes, control changes, OSC triggers, and other general types. An event is typically described by a dict with a number of properties. For example: { \"note\" : 60, \"amplitude\": 127 } Patterns : Each of the properties of an event can be specified by a Pattern, which generates a sequence of return values. Simple pattern types generate fixed sequences, random values, or values based on statistical models. Patterns can be passed other patterns as parameters, so they can operate on each other -- for example, causing an input pattern to loop N times, or skipping the input values with some probability. Devices : Events are sent to output devices, over interfaces such as MIDI or OSC. Events can also be received and processed.","title":"Basic concepts"},{"location":"#flow-diagram","text":"","title":"Flow diagram"},{"location":"#documentation","text":"Getting started Code examples Pattern library reference","title":"Documentation"},{"location":"about/","text":"About the project isobar-ext was first designed for the generative sound installation Variable 4 , in which it was used to generate musical structures in response to changing weather conditions. It was more recently used in The Listening Machine , taking live input from Twitter and generating musical output from language patterns, streamed live over the internet. Many of the concepts behind Pattern and its subclasses are inspired by the brilliant pattern library of the SuperCollider synthesis language.","title":"About the project"},{"location":"about/#about-the-project","text":"isobar-ext was first designed for the generative sound installation Variable 4 , in which it was used to generate musical structures in response to changing weather conditions. It was more recently used in The Listening Machine , taking live input from Twitter and generating musical output from language patterns, streamed live over the internet. Many of the concepts behind Pattern and its subclasses are inspired by the brilliant pattern library of the SuperCollider synthesis language.","title":"About the project"},{"location":"contributing/","text":"Contributing Third-party contributions are welcomed. Please read the CONTRIBUTING.md , and submit a pull request on GitHub .","title":"Contributing"},{"location":"contributing/#contributing","text":"Third-party contributions are welcomed. Please read the CONTRIBUTING.md , and submit a pull request on GitHub .","title":"Contributing"},{"location":"example/","text":"isobar-ext isobar-ext is a Python library for creating and manipulating musical patterns, designed for use in algorithmic composition, generative music and sonification. It makes it quick and easy to express complex musical ideas, and can send and receive events from various different sources: MIDI, OSC, SocketIO, and .mid files. Documentation index.md # The documentation homepage. ... # Other markdown pages, images and other files. Installation in a virtual environment The best way to make sure that you end up with the correct versions and without any incompatibility problems between packages it to use a virtual environment . Don't know what this is or how to set it up? We recommend to start by reading a [tutorial on virtual environments][6] for Python. Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Unix docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material","title":"isobar-ext"},{"location":"example/#isobar-ext","text":"isobar-ext is a Python library for creating and manipulating musical patterns, designed for use in algorithmic composition, generative music and sonification. It makes it quick and easy to express complex musical ideas, and can send and receive events from various different sources: MIDI, OSC, SocketIO, and .mid files.","title":"isobar-ext"},{"location":"example/#documentation","text":"index.md # The documentation homepage. ... # Other markdown pages, images and other files. Installation in a virtual environment The best way to make sure that you end up with the correct versions and without any incompatibility problems between packages it to use a virtual environment . Don't know what this is or how to set it up? We recommend to start by reading a [tutorial on virtual environments][6] for Python. Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Unix docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material","title":"Documentation"},{"location":"examples/","text":"Examples A complete set of example scripts are included with isobar-ext, demonstrating applications from simple sequencing functionality to more complex tasks such as clock sync, file I/O, etc. Examples Alternatively, to see how every function across the codebase can be used, browse the unit tests .","title":"Examples"},{"location":"examples/#examples","text":"A complete set of example scripts are included with isobar-ext, demonstrating applications from simple sequencing functionality to more complex tasks such as clock sync, file I/O, etc. Examples Alternatively, to see how every function across the codebase can be used, browse the unit tests .","title":"Examples"},{"location":"getting-started/","text":"Getting started Requirements isobar-ext has been tested on Linux (Ubuntu, Raspberry Pi OS) and macOS. It has not been officially tested on Windows, although third-party contributions of support and QA efforts would be welcomed. It requires Python 3.5 or above. On Linux, the libasound and libjack-dev packages are also required: apt install libasound2-dev libjack-dev 1. Install isobar-ext The simplest way to install isobar-ext is via pip : pip3 install isobar-ext To download the examples, you will need to clone the repo and install from source: git clone https : // github . com / piotereks / isobar-ext . git cd isobar-ext pip3 install . 2. Set up an output device The example scripts are based on sending MIDI to a DAW or MIDI-compatible hardware instrument. By default, isobar-ext uses the system's default MIDI output as its output device. If you want to specify a non-standard MIDI output, you can specify the name of the MIDI device when creating the Timeline , or set a global default output device by using an environmental variable: export ISOBAR_DEFAULT_MIDI_OUT = \"Prophet 6\" When you run an example script, you can confirm that it is using the right output as it will print the name of the output device it is using. 3. Run an example Inside the repo directory you cloned above, there are a number of example scripts. To run the \"hello world\" example: python3 examples / 00. ex - hello - world . py The script will print the default MIDI driver to screen, and begin triggering notes. Troubleshooting If you don't hear any notes, check that: the name of the correct device is printed to the console your device is configured to listen for MIDI on channel 1, and can play the note 60 Use a MIDI monitor utility to check that the events are registering correctly. Next steps Code examples Read about Patterns , Timelines , Events and Devices ,","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#requirements","text":"isobar-ext has been tested on Linux (Ubuntu, Raspberry Pi OS) and macOS. It has not been officially tested on Windows, although third-party contributions of support and QA efforts would be welcomed. It requires Python 3.5 or above. On Linux, the libasound and libjack-dev packages are also required: apt install libasound2-dev libjack-dev","title":"Requirements"},{"location":"getting-started/#1-install-isobar-ext","text":"The simplest way to install isobar-ext is via pip : pip3 install isobar-ext To download the examples, you will need to clone the repo and install from source: git clone https : // github . com / ideoforms / isobar-ext . git cd isobar-ext pip3 install .","title":"1. Install isobar-ext"},{"location":"getting-started/#2-set-up-an-output-device","text":"The example scripts are based on sending MIDI to a DAW or MIDI-compatible hardware instrument. By default, isobar-ext uses the system's default MIDI output as its output device. If you want to specify a non-standard MIDI output, you can specify the name of the MIDI device when creating the Timeline , or set a global default output device by using an environmental variable: export ISOBAR_DEFAULT_MIDI_OUT = \"Prophet 6\" When you run an example script, you can confirm that it is using the right output as it will print the name of the output device it is using.","title":"2. Set up an output device"},{"location":"getting-started/#3-run-an-example","text":"Inside the repo directory you cloned above, there are a number of example scripts. To run the \"hello world\" example: python3 examples / 00. ex - hello - world . py The script will print the default MIDI driver to screen, and begin triggering notes. Troubleshooting If you don't hear any notes, check that: the name of the correct device is printed to the console your device is configured to listen for MIDI on channel 1, and can play the note 60 Use a MIDI monitor utility to check that the events are registering correctly.","title":"3. Run an example"},{"location":"getting-started/#next-steps","text":"Code examples Read about Patterns , Timelines , Events and Devices ,","title":"Next steps"},{"location":"license/","text":"License isobar-ext is under the MIT license . This means that you are welcome to use it for any purpose, including commercial usage, but must include the copyright notice above in any copies or derivative works. Please do let me know what you use it for!","title":"License"},{"location":"license/#license","text":"isobar-ext is under the MIT license . This means that you are welcome to use it for any purpose, including commercial usage, but must include the copyright notice above in any copies or derivative works. Please do let me know what you use it for!","title":"License"},{"location":"source-code/","text":"Source code The source code for isobar-ext is hosted on GitHub: github.com/piotereks/isobar-ext To clone the latest version: git clone https://github.com/piotereks/isobar-ext.git","title":"Source code"},{"location":"source-code/#source-code","text":"The source code for isobar-ext is hosted on GitHub: github.com/piotereks/isobar-ext To clone the latest version: git clone https://github.com/piotereks/isobar-ext.git","title":"Source code"},{"location":"devices/","text":"Devices and I/O isobar-ext can send events to different types of output device. MIDI : Send/receive live MIDI note, control and clock events, either to an external MIDI hardware device or software DAW MIDI file : Generate and store MIDI sequences in a .mid file OpenSoundControl : Send events using the OpenSoundControl network protocol","title":"Devices and I/O"},{"location":"devices/#devices-and-io","text":"isobar-ext can send events to different types of output device. MIDI : Send/receive live MIDI note, control and clock events, either to an external MIDI hardware device or software DAW MIDI file : Generate and store MIDI sequences in a .mid file OpenSoundControl : Send events using the OpenSoundControl network protocol","title":"Devices and I/O"},{"location":"devices/midi/","text":"MIDI isobar-ext's MIDI support is based on the excellent mido library. Two classes are available for MIDI I/O: MidiOutputDevice Sends note and control events to a MIDI device. isobar-ext can also act as the clock out, so that external MIDI devices follow isobar-ext's internal clock. Virtual MIDI devices To control a MIDI device on the same computer that is running isobar-ext, you will need to create a virtual MIDI bus . name = \"My MIDI Device Name\" midi_out = iso . MidiOutputDevice ( device_name = name , send_clock = True ) timeline = Timeline ( tempo = 120 , output_device = midi_out ) device_name : Specifies the device name to search for. Leave empty to use the system default. send_clock : If True, sends clock sync signals to the external device. A default MIDI output device name can be set with an environmental variable: export ISOBAR_DEFAULT_MIDI_OUT = \"Prophet 6\" To list all available MIDI output devices: print(iso.io.midi.get_midi_output_names()) MidiInputDevice Receives notes and control events from a MIDI device, or sync isobar-ext to an external MIDI clock. # Receive MIDI messages from an external device name = \"My MIDI Device Name\" midi_in = iso . MidiInputDevice ( device_name = name ) # Blocking mode: waits until a message is received message = midi_in . receive () # Non-blocking: if a message is available, return it; otherwise, return None message = midi_in . poll () # Sync a Timeline to a MIDI external clock name = \"My MIDI Device Name\" midi_in = iso . MidiInputDevice ( device_name = name ) timeline = Timeline ( tempo = 120 , clock_source = midi_in ) A default MIDI input device name can be set with an environmental variable: export ISOBAR_DEFAULT_MIDI_IN = \"Prophet 6\" To list all available MIDI input devices: print(iso.io.midi.get_midi_input_names())","title":"MIDI"},{"location":"devices/midi/#midi","text":"isobar-ext's MIDI support is based on the excellent mido library. Two classes are available for MIDI I/O:","title":"MIDI"},{"location":"devices/midi/#midioutputdevice","text":"Sends note and control events to a MIDI device. isobar-ext can also act as the clock out, so that external MIDI devices follow isobar-ext's internal clock. Virtual MIDI devices To control a MIDI device on the same computer that is running isobar-ext, you will need to create a virtual MIDI bus . name = \"My MIDI Device Name\" midi_out = iso . MidiOutputDevice ( device_name = name , send_clock = True ) timeline = Timeline ( tempo = 120 , output_device = midi_out ) device_name : Specifies the device name to search for. Leave empty to use the system default. send_clock : If True, sends clock sync signals to the external device. A default MIDI output device name can be set with an environmental variable: export ISOBAR_DEFAULT_MIDI_OUT = \"Prophet 6\" To list all available MIDI output devices: print(iso.io.midi.get_midi_output_names())","title":"MidiOutputDevice"},{"location":"devices/midi/#midiinputdevice","text":"Receives notes and control events from a MIDI device, or sync isobar-ext to an external MIDI clock. # Receive MIDI messages from an external device name = \"My MIDI Device Name\" midi_in = iso . MidiInputDevice ( device_name = name ) # Blocking mode: waits until a message is received message = midi_in . receive () # Non-blocking: if a message is available, return it; otherwise, return None message = midi_in . poll () # Sync a Timeline to a MIDI external clock name = \"My MIDI Device Name\" midi_in = iso . MidiInputDevice ( device_name = name ) timeline = Timeline ( tempo = 120 , clock_source = midi_in ) A default MIDI input device name can be set with an environmental variable: export ISOBAR_DEFAULT_MIDI_IN = \"Prophet 6\" To list all available MIDI input devices: print(iso.io.midi.get_midi_input_names())","title":"MidiInputDevice"},{"location":"devices/midifile/","text":"MIDI file MidiFileOutputDevice Writing MIDI files is done by setting the output device of a Timeline to a MidiFileOutputDevice isobar-ext normally generates events in real-time according to the tempo of the Timeline. To batch process events instantaneously, set the tempo of the timeline to iso.MAX_CLOCK_RATE . filename = \"output.mid\" output = MidiFileOutputDevice ( filename ) timeline = iso . Timeline ( iso . MAX_CLOCK_RATE , output_device = output ) timeline . stop_when_done = True timeline . schedule ( { \"note\" : iso . PSequence ([ 60 , 62 , 64 , 65 ], 1 ) } ) timeline . run () output . write () MidiFileInputDevice Reading MIDI files is done with a MidiFileInputDevice . The method MidiFileInputDevice.read() returns a PDict containing PSequence patterns for each of the MIDI event properties (note, amplitude, duration), which can be scheduled for playback within a timeline: pattern = MidiFileInputDevice ( args . filename ) . read () timeline = iso . Timeline () timeline . schedule ( pattern ) timeline . run () To discard the amplitudes and durations, and make use of just the pitch values: pattern = MidiFileInputDevice ( args . filename ) . read () timeline = iso . Timeline () timeline . schedule ({ \"note\" : pattern [ \"note\" ], \"duration\" : 0.1 }) timeline . run ()","title":"MIDI files"},{"location":"devices/midifile/#midi-file","text":"","title":"MIDI file"},{"location":"devices/midifile/#midifileoutputdevice","text":"Writing MIDI files is done by setting the output device of a Timeline to a MidiFileOutputDevice isobar-ext normally generates events in real-time according to the tempo of the Timeline. To batch process events instantaneously, set the tempo of the timeline to iso.MAX_CLOCK_RATE . filename = \"output.mid\" output = MidiFileOutputDevice ( filename ) timeline = iso . Timeline ( iso . MAX_CLOCK_RATE , output_device = output ) timeline . stop_when_done = True timeline . schedule ( { \"note\" : iso . PSequence ([ 60 , 62 , 64 , 65 ], 1 ) } ) timeline . run () output . write ()","title":"MidiFileOutputDevice"},{"location":"devices/midifile/#midifileinputdevice","text":"Reading MIDI files is done with a MidiFileInputDevice . The method MidiFileInputDevice.read() returns a PDict containing PSequence patterns for each of the MIDI event properties (note, amplitude, duration), which can be scheduled for playback within a timeline: pattern = MidiFileInputDevice ( args . filename ) . read () timeline = iso . Timeline () timeline . schedule ( pattern ) timeline . run () To discard the amplitudes and durations, and make use of just the pitch values: pattern = MidiFileInputDevice ( args . filename ) . read () timeline = iso . Timeline () timeline . schedule ({ \"note\" : pattern [ \"note\" ], \"duration\" : 0.1 }) timeline . run ()","title":"MidiFileInputDevice"},{"location":"devices/osc/","text":"OpenSoundControl To send a sequence of events to an OSC device: osc_device = iso . OSCOutputDevice ( \"127.0.0.1\" , 8010 ) timeline = iso . Timeline ( 120 , output_device = osc_device ) timeline . schedule ({ \"osc_address\" : \"/freq\" , \"osc_params\" : [ iso . PSequence ([ 440 , 880 ]) ] }) Control-rate interpolation is not yet supported for OSC.","title":"OSC"},{"location":"devices/osc/#opensoundcontrol","text":"To send a sequence of events to an OSC device: osc_device = iso . OSCOutputDevice ( \"127.0.0.1\" , 8010 ) timeline = iso . Timeline ( 120 , output_device = osc_device ) timeline . schedule ({ \"osc_address\" : \"/freq\" , \"osc_params\" : [ iso . PSequence ([ 440 , 880 ]) ] }) Control-rate interpolation is not yet supported for OSC.","title":"OpenSoundControl"},{"location":"devices/signalflow/","text":"SignalFlow","title":"SignalFlow"},{"location":"devices/signalflow/#signalflow","text":"","title":"SignalFlow"},{"location":"devices/supercollider/","text":"SuperCollider","title":"SuperCollider"},{"location":"devices/supercollider/#supercollider","text":"","title":"SuperCollider"},{"location":"devices/virtual-midi-devices/","text":"Virtual MIDI Devices To send MIDI events to audio software running on the same computer (for example, to use isobar-ext to trigger events in your DAW), you will generally need to set up a virtual MIDI driver . This lets you send MIDI messages between different applications. For cross-platform instructions on how to do this, see Setting up a virtual MIDI bus (Ableton).","title":"Virtual MIDI devices"},{"location":"devices/virtual-midi-devices/#virtual-midi-devices","text":"To send MIDI events to audio software running on the same computer (for example, to use isobar-ext to trigger events in your DAW), you will generally need to set up a virtual MIDI driver . This lets you send MIDI messages between different applications. For cross-platform instructions on how to do this, see Setting up a virtual MIDI bus (Ableton).","title":"Virtual MIDI Devices"},{"location":"events/","text":"Events Events are scheduled by passing a dict to Timeline.schedule() , which inspects the keys to figure out what type of event you are intending. Event dicts with a note or degree key are assumed to be note events Event dicts with a control or program_change key are assumed to be control events Event dicts with an action key is assumed to be an action event The default values for unspecified parameters in an Event dict are infinite patterns generated by PConstant . This means that, unless a finite parameter is explicitly passed, events will continue to be generated forever. Event types Note events trigger discrete MIDI notes, with a duration and amplitude Control events include MIDI control change, program change and pitchwheel messages, and can apply quasi-continuous control curves Action events call arbitrary Python functions","title":"Events"},{"location":"events/#events","text":"Events are scheduled by passing a dict to Timeline.schedule() , which inspects the keys to figure out what type of event you are intending. Event dicts with a note or degree key are assumed to be note events Event dicts with a control or program_change key are assumed to be control events Event dicts with an action key is assumed to be an action event The default values for unspecified parameters in an Event dict are infinite patterns generated by PConstant . This means that, unless a finite parameter is explicitly passed, events will continue to be generated forever.","title":"Events"},{"location":"events/#event-types","text":"Note events trigger discrete MIDI notes, with a duration and amplitude Control events include MIDI control change, program change and pitchwheel messages, and can apply quasi-continuous control curves Action events call arbitrary Python functions","title":"Event types"},{"location":"events/action/","text":"Action events Action events trigger Python functions. Set the action property to a function or lambda, and it will be executed at the time of the event: timeline . schedule ({ \"action\" : lambda : print ( \"Hello world\" ) }) Observe that, when you run the above, it will print Hello world indefinitely, once per beat. Why is this? Just as for notes and other event types, the duration parameter of the event template defaults to an infinitely-repeating pattern generated by PConstant . To limit the number of repeats that an action performs, use the count argument: timeline . schedule ({ \"action\" : lambda : print ( round ( timeline . current_time )) }, count = 4 ) Action arguments For more complex functions, custom named keyword arguments can be passed to the function using the args property This executes an action every 4 beats to change the global key of the piece, using the Globals variables: def set_key ( k ): iso . Globals . set ( \"key\" , iso . Key ( k )) timeline . schedule ({ \"action\" : set_key , \"args\" : { \"k\" : iso . PWhite ( 8 ) }, \"duration\" : 4 }) timeline . schedule ({ \"degree\" : 0 , \"key\" : iso . PGlobals ( \"key\" ), \"octave\" : 4 })","title":"Action events"},{"location":"events/action/#action-events","text":"Action events trigger Python functions. Set the action property to a function or lambda, and it will be executed at the time of the event: timeline . schedule ({ \"action\" : lambda : print ( \"Hello world\" ) }) Observe that, when you run the above, it will print Hello world indefinitely, once per beat. Why is this? Just as for notes and other event types, the duration parameter of the event template defaults to an infinitely-repeating pattern generated by PConstant . To limit the number of repeats that an action performs, use the count argument: timeline . schedule ({ \"action\" : lambda : print ( round ( timeline . current_time )) }, count = 4 )","title":"Action events"},{"location":"events/action/#action-arguments","text":"For more complex functions, custom named keyword arguments can be passed to the function using the args property This executes an action every 4 beats to change the global key of the piece, using the Globals variables: def set_key ( k ): iso . Globals . set ( \"key\" , iso . Key ( k )) timeline . schedule ({ \"action\" : set_key , \"args\" : { \"k\" : iso . PWhite ( 8 ) }, \"duration\" : 4 }) timeline . schedule ({ \"degree\" : 0 , \"key\" : iso . PGlobals ( \"key\" ), \"octave\" : 4 })","title":"Action arguments"},{"location":"events/control/","text":"Control events MIDI control change events can be sequenced by specifying the integer control index and the value to set the control change to: timeline . schedule ({ \"control\" : 0 , \"value\" : iso . PWhite ( 0 , 128 ), \"duration\" : 0.5 }) The above example sets control index 0 to a value drawn from a uniformly distribution, once every half-beat. Interpolation To transmit smooth control curves, isobar-ext can interpolate between control values. The resulting interpolated value is sent continuously to the output device. # Apply linear interpolation to smoothly fade between values. timeline . schedule ({ \"control\" : 0 , \"value\" : iso . PWhite ( 0 , 128 ), \"duration\" : 0.5 }, interpolate = \"linear\" ) To jump instantaneously between values when interpolation is being used, simply set a duration of zero. The below applies sawtooth-shaped modulation to a control signal. timeline . schedule ({ \"control\" : 0 , \"value\" : iso . PSequence ([ 0 , 127 ]), \"duration\" : iso . PSequence ([ 1 , 0 ]) }, interpolate = \"linear\" ) Interpolation modes include: linear cosine","title":"Control events"},{"location":"events/control/#control-events","text":"MIDI control change events can be sequenced by specifying the integer control index and the value to set the control change to: timeline . schedule ({ \"control\" : 0 , \"value\" : iso . PWhite ( 0 , 128 ), \"duration\" : 0.5 }) The above example sets control index 0 to a value drawn from a uniformly distribution, once every half-beat.","title":"Control events"},{"location":"events/control/#interpolation","text":"To transmit smooth control curves, isobar-ext can interpolate between control values. The resulting interpolated value is sent continuously to the output device. # Apply linear interpolation to smoothly fade between values. timeline . schedule ({ \"control\" : 0 , \"value\" : iso . PWhite ( 0 , 128 ), \"duration\" : 0.5 }, interpolate = \"linear\" ) To jump instantaneously between values when interpolation is being used, simply set a duration of zero. The below applies sawtooth-shaped modulation to a control signal. timeline . schedule ({ \"control\" : 0 , \"value\" : iso . PSequence ([ 0 , 127 ]), \"duration\" : iso . PSequence ([ 1 , 0 ]) }, interpolate = \"linear\" ) Interpolation modes include: linear cosine","title":"Interpolation"},{"location":"events/note/","text":"Notes and MIDI events Notes and names A common approach to composition in isobar-ext is building up patterns of notes, which correspond to the standard MIDI note range (0..127, with 60 = middle C) and velocity range (0..127). timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 64 , 67 , 72 ], 1 ), \"amplitude\" : 64 }) To get a note from its string representation, use the note_name_to_midi_note utility function: >>> print ( iso . note_name_to_midi_note ( \"G#2\" )) 32 Note events support the following properties: property type description note int MIDI note value amplitude int MIDI note velocity duration float Interval between notes (seconds) gate float Proportion of note to sustain (where 1.0 = legato) key Key Key for degree lookup scale Scale Scale for degree lookup degree int Degree within key/scale (cannot be used if note is specified) transpose int MIDI note transpose octave int MIDI note octave transpose active int If false, skips the note Duration and gate The duration specifies the interval between one note and the next. The gate key specifies what proportion of this interval the note will be sustained for (and defaults to 1.0, for seamless legato). For instance: #-------------------------------------------------------------------------------- # Play a note every beat, sustained for half a beat #-------------------------------------------------------------------------------- timeline . schedule ({ \"note\" : 60 \"duration\" : 1 , \"gate\" : 0.5 }) The gate can also be greater than 1, to hold a note down as the next note begins: #-------------------------------------------------------------------------------- # Play a sustained, overlapping chord, with each note lasting for 4 beats #-------------------------------------------------------------------------------- timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 64 , 67 , 72 ], 1 ), \"duration\" : 0.5 , \"gate\" : 8 }) Keys and Scales isobar-ext has builtin objects representing musical keys and scales. Scale encapsulates an ordered set of semitones. Named scales are defined corresponding to commonly-used scales ( major , minor , chromatic , aeolian , etc). Key encapsulates a Scale with a specified tonic. Warning isobar-ext currently only supports equal temperament tuning. Keys and scales can be used in events by using the degree key to look up a specific degree within the key/scale. transpose and octave can be used to transpose by semitones and octaves respectively. #-------------------------------------------------------------------------------- # Play an F minor arpeggio #-------------------------------------------------------------------------------- timeline . schedule ({ \"degree\" : iso . PSequence ([ 0 , 2 , 4 , 7 ], 1 ), \"key\" : iso . Key ( \"F\" , \"minor\" ), \"octave\" : 4 }) Chords Chords can be specified by passing tuples of notes to the note or degree property. #-------------------------------------------------------------------------------- # Play a series of 3-note chords. #-------------------------------------------------------------------------------- timeline . schedule ({ \"degree\" : iso . PSequence ([ ( 0 , 1 , 4 ), ( 1 , 4 , 6 ), ( 3 , 4 , 7 ), ( - 1 , 0 , 4 ), ]), \"octave\" : 4 , \"duration\" : 2 }) You can also specify different amplitudes or gates for notes of a chord by passing tuples of the same length: timeline . schedule ({ \"note\" : iso . PSequence ([ ( 60 , 62 , 67 ), ]), \"gate\" : iso . PSequence ([ ( 0.25 , 0.5 , 1 ) ]), \"amplitude\" : iso . PSequence ([ ( 96 , 64 , 32 ), ( 64 , 96 , 32 ), ( 64 , 32 , 96 ), ]), \"duration\" : 0.25 }) Rests Use None to specify a rest: timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 60 , None , 60 , None , 60 , 60 , None ]), \"duration\" : 0.25 }) Many Pattern classes can operate explicitly on rests, or introduce rests. For example: PCollapse takes an input and steps past any rests to remove gaps PSkipIf replaces notes with rests given a conditional PSkip replaces notes with rests randomly given a probability PPad pads a sequence with rests until it reaches a specified length","title":"Note events"},{"location":"events/note/#notes-and-midi-events","text":"","title":"Notes and MIDI events"},{"location":"events/note/#notes-and-names","text":"A common approach to composition in isobar-ext is building up patterns of notes, which correspond to the standard MIDI note range (0..127, with 60 = middle C) and velocity range (0..127). timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 64 , 67 , 72 ], 1 ), \"amplitude\" : 64 }) To get a note from its string representation, use the note_name_to_midi_note utility function: >>> print ( iso . note_name_to_midi_note ( \"G#2\" )) 32 Note events support the following properties: property type description note int MIDI note value amplitude int MIDI note velocity duration float Interval between notes (seconds) gate float Proportion of note to sustain (where 1.0 = legato) key Key Key for degree lookup scale Scale Scale for degree lookup degree int Degree within key/scale (cannot be used if note is specified) transpose int MIDI note transpose octave int MIDI note octave transpose active int If false, skips the note","title":"Notes and names"},{"location":"events/note/#duration-and-gate","text":"The duration specifies the interval between one note and the next. The gate key specifies what proportion of this interval the note will be sustained for (and defaults to 1.0, for seamless legato). For instance: #-------------------------------------------------------------------------------- # Play a note every beat, sustained for half a beat #-------------------------------------------------------------------------------- timeline . schedule ({ \"note\" : 60 \"duration\" : 1 , \"gate\" : 0.5 }) The gate can also be greater than 1, to hold a note down as the next note begins: #-------------------------------------------------------------------------------- # Play a sustained, overlapping chord, with each note lasting for 4 beats #-------------------------------------------------------------------------------- timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 64 , 67 , 72 ], 1 ), \"duration\" : 0.5 , \"gate\" : 8 })","title":"Duration and gate"},{"location":"events/note/#keys-and-scales","text":"isobar-ext has builtin objects representing musical keys and scales. Scale encapsulates an ordered set of semitones. Named scales are defined corresponding to commonly-used scales ( major , minor , chromatic , aeolian , etc). Key encapsulates a Scale with a specified tonic. Warning isobar-ext currently only supports equal temperament tuning. Keys and scales can be used in events by using the degree key to look up a specific degree within the key/scale. transpose and octave can be used to transpose by semitones and octaves respectively. #-------------------------------------------------------------------------------- # Play an F minor arpeggio #-------------------------------------------------------------------------------- timeline . schedule ({ \"degree\" : iso . PSequence ([ 0 , 2 , 4 , 7 ], 1 ), \"key\" : iso . Key ( \"F\" , \"minor\" ), \"octave\" : 4 })","title":"Keys and Scales"},{"location":"events/note/#chords","text":"Chords can be specified by passing tuples of notes to the note or degree property. #-------------------------------------------------------------------------------- # Play a series of 3-note chords. #-------------------------------------------------------------------------------- timeline . schedule ({ \"degree\" : iso . PSequence ([ ( 0 , 1 , 4 ), ( 1 , 4 , 6 ), ( 3 , 4 , 7 ), ( - 1 , 0 , 4 ), ]), \"octave\" : 4 , \"duration\" : 2 }) You can also specify different amplitudes or gates for notes of a chord by passing tuples of the same length: timeline . schedule ({ \"note\" : iso . PSequence ([ ( 60 , 62 , 67 ), ]), \"gate\" : iso . PSequence ([ ( 0.25 , 0.5 , 1 ) ]), \"amplitude\" : iso . PSequence ([ ( 96 , 64 , 32 ), ( 64 , 96 , 32 ), ( 64 , 32 , 96 ), ]), \"duration\" : 0.25 })","title":"Chords"},{"location":"events/note/#rests","text":"Use None to specify a rest: timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 60 , None , 60 , None , 60 , 60 , None ]), \"duration\" : 0.25 }) Many Pattern classes can operate explicitly on rests, or introduce rests. For example: PCollapse takes an input and steps past any rests to remove gaps PSkipIf replaces notes with rests given a conditional PSkip replaces notes with rests randomly given a probability PPad pads a sequence with rests until it reaches a specified length","title":"Rests"},{"location":"patterns/","text":"Patterns About patterns Patterns are the fundamental building blocks that are used to create melodies, rhythms and control sequences. A pattern is a Python iterator , which is to say it does two things: generates and returns the next item in the sequence when no more items are available in the sequence, raises a StopIteration exception >>> seq = iso . PSequence ([ 1 , 2 , 3 ], 1 ) >>> next ( seq ) 1 >>> next ( seq ) 2 >>> next ( seq ) 3 >>> next ( seq ) Traceback ( most recent call last ): File \"sequence.py\" , line 46 , in __next__ raise StopIteration StopIteration Note that this means that patterns can't seek backwards in time. Their only concern is generating the next event. By assigning patterns to properties of events , you can specify sequences of values to control any aspect of the control output: pitch, velocity, duration, etc. Patterns can be finite, such as the example above, or infinite, in which case they will keep generating new values forever. Patterns can also typically generate different Python types. Some Pattern classes will seek to do the right thing based on whether they are passed them int or float arguments. PSequence([ \"apple\", \"pear\" ]) generates an alternating pair of strings PWhite(0, 10) generates a stream of ints between [0 .. 9] PWhite(0.0, 10.0) generates a stream of floats between [0.0 .. 10.0] PChoice([ Key(\"C\", \"major\"), Key(\"A\", \"minor\") ]) picks one of the specified Key s at random Pattern resolution When a pattern returns a pattern, the embedded pattern will also be resolved recursively. For example: PChoice([ PSequence([0, 2, 3]), PSequence([7, 5, 2 ]) ]) each step, picks one of the embedded patterns and returns its next value Pattern operators Patterns can be combined and modified using standard Python arithmetic operators, with other patterns or with scalar values. >>> added = iso . PSequence ([ 1 , 2 , 3 ]) + 10 >>> next ( added ) 11 >>> next ( added ) 12 >>> multiplied = iso . PSequence ([ 1 , 2 , 3 ]) * 4 >>> next ( multiplied ) 4 >>> next ( multiplied ) 8 >>> inverted = 12 - iso . PSequence ([ 1 , 2 , 3 ]) >>> next ( inverted ) 11 >>> next ( inverted ) 10 combined = iso . PSequence ([ 1 , 2 , 3 ]) + iso . PSequence ([ 12 , 0 , 12 ]) >>> next ( combined ) 13 >>> next ( combined ) 2 The operators are designed to do what you would expect: binary operators ( + , - , * , / , % , << , >> ) perform the operation on each item of the input patterns. Note that, for binary operators, if either of the inputs returns None , the output value becomes None . equality operators ( < , > , == , != ) can be used to do element-wise comparison on the input sequences, returning a pattern whose values are either True , False or None . abs() can be used to generate the absolute values of a sequence For finite sequences, len() will return the length of the sequence A float pattern can be turned into an int pattern with isobar-ext.PInt(pattern) Duplicating patterns It's often useful to be able to apply the same pattern to multiple properties or events. However, this can result in unwanted behaviours as shown below: >>> a = iso . PSequence ([ 1 , 2 , 3 ]) >>> d = iso . PDict ({ \"p1\" : a , \"p2\" : a }) >>> next ( d ) { 'p1' : 1 , 'p2' : 2 } Because the \"p1\" and \"p2\" properties both refer to the same instance, the next() method is called twice on a . Instead, use a.copy() to create a duplicate with identical state: >>> a = iso . PSequence ([ 1 , 2 , 3 ]) >>> d = iso . PDict ({ \"p1\" : a . copy (), \"p2\" : a . copy () }) >>> next ( d ) { 'p1' : 1 , 'p2' : 1 } Resetting a pattern To rewind a pattern to its initial state, call pattern.reset() . This restores all state variables to their original values. Stochastic patterns Stochastic patterns each have their own independent random number generator state. This allows them to be seeded with a known value to create repeatable pseudo-random number sequences. >>> a = iso . PWhite ( 0 , 10 ) >>> a . seed ( 123 ) >>> a . nextn ( 16 ) [ 0 , 0 , 4 , 1 , 9 , 0 , 5 , 3 , 8 , 1 , 3 , 3 , 2 , 0 , 4 , 0 ] >>> a . seed ( 123 ) >>> a . nextn ( 16 ) [ 0 , 0 , 4 , 1 , 9 , 0 , 5 , 3 , 8 , 1 , 3 , 3 , 2 , 0 , 4 , 0 ] Static patterns The state of a regular pattern steps forward each time the next() method is called. The state of a static pattern, conversely, is not modified by a call to next() . This means that next() may be called multiple times and return the same value each time. Static pattern classes include: PStaticPattern : When called as PStaticPattern(pattern, duration) , wraps a regular pattern and returns a new static pattern. Each new value of the inner pattern is returned for a specified duration in beats (see example below). The duration parameter may also be a pattern. PCurrentTime : Returns the current Timeline's time, in beats. PGlobals : See Globals . Static patterns can be used to impose temporal structure on a piece. For example, to modulate over a set of keys: #-------------------------------------------------------------------------------- # Create a pattern which is an alternating pair of Keys. #-------------------------------------------------------------------------------- key_sequence = iso . PSequence ([ iso . Key ( \"C\" , \"minor\" ), iso . Key ( \"G\" , \"major\" ), ]) #-------------------------------------------------------------------------------- # Create a static pattern embeds the key_sequence pattern. # Each value will be held for 4 beats before progressing to the next value. #-------------------------------------------------------------------------------- key_static = iso . PStaticPattern ( key_sequence , 4 ) #-------------------------------------------------------------------------------- # Schedule a pattern which plays notes following the given keys. # A \"C\" note will be played for 4 notes, followed by a \"G\" for 4 notes, # repeatedly. The same static pattern can be accessed by multiple different # tracks or timelines to orchestrate changes across the composition. #-------------------------------------------------------------------------------- timeline = iso . Timeline ( 120 ) timeline . schedule ({ \"degree\" : 0 , \"octave\" : 5 , \"key\" : key_static , }) Globals The Globals class, and accompanying PGlobals pattern, can be used to share common variables across an isobar-ext composition. For example: #-------------------------------------------------------------------------------- # Create a stream of events that will skip each note based on a \"density\" # global, with a key set by the \"key\" global. #-------------------------------------------------------------------------------- iso . Globals . set ( \"density\" , 0.5 ) iso . Globals . set ( \"key\" , iso . Key ( \"A\" , \"minor\" )) p = iso . PDict ({ \"degree\" : iso . PSkip ( 0 , iso . PGlobals ( \"density\" )), \"key\" : iso . PGlobals ( \"key\" ) })","title":"About patterns"},{"location":"patterns/#patterns","text":"","title":"Patterns"},{"location":"patterns/#about-patterns","text":"Patterns are the fundamental building blocks that are used to create melodies, rhythms and control sequences. A pattern is a Python iterator , which is to say it does two things: generates and returns the next item in the sequence when no more items are available in the sequence, raises a StopIteration exception >>> seq = iso . PSequence ([ 1 , 2 , 3 ], 1 ) >>> next ( seq ) 1 >>> next ( seq ) 2 >>> next ( seq ) 3 >>> next ( seq ) Traceback ( most recent call last ): File \"sequence.py\" , line 46 , in __next__ raise StopIteration StopIteration Note that this means that patterns can't seek backwards in time. Their only concern is generating the next event. By assigning patterns to properties of events , you can specify sequences of values to control any aspect of the control output: pitch, velocity, duration, etc. Patterns can be finite, such as the example above, or infinite, in which case they will keep generating new values forever. Patterns can also typically generate different Python types. Some Pattern classes will seek to do the right thing based on whether they are passed them int or float arguments. PSequence([ \"apple\", \"pear\" ]) generates an alternating pair of strings PWhite(0, 10) generates a stream of ints between [0 .. 9] PWhite(0.0, 10.0) generates a stream of floats between [0.0 .. 10.0] PChoice([ Key(\"C\", \"major\"), Key(\"A\", \"minor\") ]) picks one of the specified Key s at random","title":"About patterns"},{"location":"patterns/#pattern-resolution","text":"When a pattern returns a pattern, the embedded pattern will also be resolved recursively. For example: PChoice([ PSequence([0, 2, 3]), PSequence([7, 5, 2 ]) ]) each step, picks one of the embedded patterns and returns its next value","title":"Pattern resolution"},{"location":"patterns/#pattern-operators","text":"Patterns can be combined and modified using standard Python arithmetic operators, with other patterns or with scalar values. >>> added = iso . PSequence ([ 1 , 2 , 3 ]) + 10 >>> next ( added ) 11 >>> next ( added ) 12 >>> multiplied = iso . PSequence ([ 1 , 2 , 3 ]) * 4 >>> next ( multiplied ) 4 >>> next ( multiplied ) 8 >>> inverted = 12 - iso . PSequence ([ 1 , 2 , 3 ]) >>> next ( inverted ) 11 >>> next ( inverted ) 10 combined = iso . PSequence ([ 1 , 2 , 3 ]) + iso . PSequence ([ 12 , 0 , 12 ]) >>> next ( combined ) 13 >>> next ( combined ) 2 The operators are designed to do what you would expect: binary operators ( + , - , * , / , % , << , >> ) perform the operation on each item of the input patterns. Note that, for binary operators, if either of the inputs returns None , the output value becomes None . equality operators ( < , > , == , != ) can be used to do element-wise comparison on the input sequences, returning a pattern whose values are either True , False or None . abs() can be used to generate the absolute values of a sequence For finite sequences, len() will return the length of the sequence A float pattern can be turned into an int pattern with isobar-ext.PInt(pattern)","title":"Pattern operators"},{"location":"patterns/#duplicating-patterns","text":"It's often useful to be able to apply the same pattern to multiple properties or events. However, this can result in unwanted behaviours as shown below: >>> a = iso . PSequence ([ 1 , 2 , 3 ]) >>> d = iso . PDict ({ \"p1\" : a , \"p2\" : a }) >>> next ( d ) { 'p1' : 1 , 'p2' : 2 } Because the \"p1\" and \"p2\" properties both refer to the same instance, the next() method is called twice on a . Instead, use a.copy() to create a duplicate with identical state: >>> a = iso . PSequence ([ 1 , 2 , 3 ]) >>> d = iso . PDict ({ \"p1\" : a . copy (), \"p2\" : a . copy () }) >>> next ( d ) { 'p1' : 1 , 'p2' : 1 }","title":"Duplicating patterns"},{"location":"patterns/#resetting-a-pattern","text":"To rewind a pattern to its initial state, call pattern.reset() . This restores all state variables to their original values.","title":"Resetting a pattern"},{"location":"patterns/#stochastic-patterns","text":"Stochastic patterns each have their own independent random number generator state. This allows them to be seeded with a known value to create repeatable pseudo-random number sequences. >>> a = iso . PWhite ( 0 , 10 ) >>> a . seed ( 123 ) >>> a . nextn ( 16 ) [ 0 , 0 , 4 , 1 , 9 , 0 , 5 , 3 , 8 , 1 , 3 , 3 , 2 , 0 , 4 , 0 ] >>> a . seed ( 123 ) >>> a . nextn ( 16 ) [ 0 , 0 , 4 , 1 , 9 , 0 , 5 , 3 , 8 , 1 , 3 , 3 , 2 , 0 , 4 , 0 ]","title":"Stochastic patterns"},{"location":"patterns/#static-patterns","text":"The state of a regular pattern steps forward each time the next() method is called. The state of a static pattern, conversely, is not modified by a call to next() . This means that next() may be called multiple times and return the same value each time. Static pattern classes include: PStaticPattern : When called as PStaticPattern(pattern, duration) , wraps a regular pattern and returns a new static pattern. Each new value of the inner pattern is returned for a specified duration in beats (see example below). The duration parameter may also be a pattern. PCurrentTime : Returns the current Timeline's time, in beats. PGlobals : See Globals . Static patterns can be used to impose temporal structure on a piece. For example, to modulate over a set of keys: #-------------------------------------------------------------------------------- # Create a pattern which is an alternating pair of Keys. #-------------------------------------------------------------------------------- key_sequence = iso . PSequence ([ iso . Key ( \"C\" , \"minor\" ), iso . Key ( \"G\" , \"major\" ), ]) #-------------------------------------------------------------------------------- # Create a static pattern embeds the key_sequence pattern. # Each value will be held for 4 beats before progressing to the next value. #-------------------------------------------------------------------------------- key_static = iso . PStaticPattern ( key_sequence , 4 ) #-------------------------------------------------------------------------------- # Schedule a pattern which plays notes following the given keys. # A \"C\" note will be played for 4 notes, followed by a \"G\" for 4 notes, # repeatedly. The same static pattern can be accessed by multiple different # tracks or timelines to orchestrate changes across the composition. #-------------------------------------------------------------------------------- timeline = iso . Timeline ( 120 ) timeline . schedule ({ \"degree\" : 0 , \"octave\" : 5 , \"key\" : key_static , })","title":"Static patterns"},{"location":"patterns/#globals","text":"The Globals class, and accompanying PGlobals pattern, can be used to share common variables across an isobar-ext composition. For example: #-------------------------------------------------------------------------------- # Create a stream of events that will skip each note based on a \"density\" # global, with a key set by the \"key\" global. #-------------------------------------------------------------------------------- iso . Globals . set ( \"density\" , 0.5 ) iso . Globals . set ( \"key\" , iso . Key ( \"A\" , \"minor\" )) p = iso . PDict ({ \"degree\" : iso . PSkip ( 0 , iso . PGlobals ( \"density\" )), \"key\" : iso . PGlobals ( \"key\" ) })","title":"Globals"},{"location":"patterns/library/","text":"Core View source: core.py Class Function Pattern Abstract superclass of all pattern generators. PConstant Returns a fixed value. PRef Contains a reference to another pattern, which can be replaced dynamically. PFunc Returns the value generated by a function. PArrayIndex Request a specified index from an array. PDict Construct a pattern from a dict of arrays, or an array of dicts. PDictKey Request a specified key from a dictionary. PConcatenate Concatenate the output of multiple sequences. PAbs Absolute value of input PInt Integer value of input PAdd Add elements of two patterns (shorthand: patternA + patternB) PSub Subtract elements of two patterns (shorthand: patternA - patternB) PMul Multiply elements of two patterns (shorthand: patternA * patternB) PDiv Divide elements of two patterns (shorthand: patternA / patternB) PFloorDiv Integer division (shorthand: patternA // patternB) PMod Modulo elements of two patterns (shorthand: patternA % patternB) PPow One pattern to the power of another (shorthand: patternA ** patternB) PLShift Binary left-shift (shorthand: patternA << patternB) PRShift Binary right-shift (shorthand: patternA << patternB) PEqual Return 1 if a == b, 0 otherwise (shorthand: patternA == patternB) PGreaterThanOrEqual Return 1 if a != b, 0 otherwise (shorthand: patternA != patternB) PGreaterThan Return 1 if a > b, 0 otherwise (shorthand: patternA > patternB) PGreaterThanOrEqual Return 1 if a >= b, 0 otherwise (shorthand: patternA >= patternB) PLessThan Return 1 if a < b, 0 otherwise (shorthand: patternA < patternB) PLessThanOrEqual Return 1 if a <= b, 0 otherwise (shorthand: patternA <= patternB) Scalar View source: scalar.py Class Function PChanged Outputs a 1 if the value of a pattern has changed. PDiff Outputs the difference between the current and previous values of an input pattern PSkipIf If skip is false, returns input ; otherwise, returns None. PNormalise Adaptively normalise input to [0..1] over a linear scale. PMap Apply an arbitrary function to an input pattern. PMapEnumerated Apply arbitrary function to input, passing a counter. PLinLin Map input from linear range [a,b] to linear range [c,d]. PLinExp Map input from linear range [a,b] to exponential range [c,d]. PRound Round input to N decimal places. PScalar Reduce tuples and lists into single scalar values, PWrap Wrap input note values within , . PIndexOf Find index of items from pattern in Sequence View source: sequence.py Class Function PSeries Arithmetic series, beginning at start , increment by step PRange Similar to PSeries, but specify a max/step value. PGeom Geometric series, beginning at start , multiplied by step PImpulse Outputs a 1 every events, otherwise 0. PLoop Repeats a finite pattern for n repeats. PPingPong Ping-pong input pattern back and forth N times. PCreep Loop length -note segment, progressing creep notes after repeats repeats. PStutter Play each note of pattern count times. PSubsequence Returns a finite subsequence of an input pattern. PReverse Reverses a finite sequence. PReset Resets pattern whenever trigger is true PCounter Increments a counter by 1 for each zero-crossing in trigger . PCollapse Skip over any rests in input PNoRepeats Skip over repeated values in input PPad Pad pattern with rests until it reaches length length . PPadToMultiple Pad pattern with rests until its length is divisible by multiple . PArpeggiator Arpeggiator. PEuclidean Generate Euclidean rhythms. PPermut Generate every permutation of count input items. PPatternGeneratorAction Each time its pattern is exhausted, request a new pattern by calling . PSequenceAction Iterate over an array, perform a function, and repeat. Chance View source: chance.py Class Function PWhite White noise between min and max . PBrown Brownian noise. PCoin Coin toss, returning either 0 or 1 given some probability . PWalk Random walk around list. PChoice Pick a random element from values , weighted by optional weights . PSample Pick multiple random elements from values , weighted by optional weights , PShuffle Shuffled list. PShuffleInput Every n steps, take n values from pattern and reorder. PSkip Skip events with some probability, 1 - . PFlipFlop flip a binary bit with some probability. PSwitchOne Capture length input values; loop, repeatedly switching two adjacent values. Tonal View source: tonal.py Class Function PDegree Map scale index to MIDI notes in . PFilterByKey Filter notes based on their presence in . PNearestNoteInKey Return the nearest note in . PMidiNoteToFrequency Map MIDI note to frequency value. Static View source: static.py Class Function PGlobals Static global value identified by a string. PCurrentTime Returns the position (in beats) of the current timeline. Fade View source: fade.py Class Function PFadeNotewise Fade a pattern in/out by introducing notes at a gradual rate. PFadeNotewiseRandom Fade a pattern in/out by gradually introducing random notes. Markov View source: markov.py Class Function PMarkov First-order Markov chain generator. Lsystem View source: lsystem.py Class Function PLSystem integer sequence derived from Lindenmayer systems Warp View source: warp.py Class Function PWInterpolate Requests a new target warp value from pattern every length beats PWSine Sinosoidal warp, period length beats, amplitude +/- . PWRallantando Exponential deceleration to times the current tempo over length beats.","title":"Pattern library reference"},{"location":"patterns/library/#core","text":"View source: core.py Class Function Pattern Abstract superclass of all pattern generators. PConstant Returns a fixed value. PRef Contains a reference to another pattern, which can be replaced dynamically. PFunc Returns the value generated by a function. PArrayIndex Request a specified index from an array. PDict Construct a pattern from a dict of arrays, or an array of dicts. PDictKey Request a specified key from a dictionary. PConcatenate Concatenate the output of multiple sequences. PAbs Absolute value of input PInt Integer value of input PAdd Add elements of two patterns (shorthand: patternA + patternB) PSub Subtract elements of two patterns (shorthand: patternA - patternB) PMul Multiply elements of two patterns (shorthand: patternA * patternB) PDiv Divide elements of two patterns (shorthand: patternA / patternB) PFloorDiv Integer division (shorthand: patternA // patternB) PMod Modulo elements of two patterns (shorthand: patternA % patternB) PPow One pattern to the power of another (shorthand: patternA ** patternB) PLShift Binary left-shift (shorthand: patternA << patternB) PRShift Binary right-shift (shorthand: patternA << patternB) PEqual Return 1 if a == b, 0 otherwise (shorthand: patternA == patternB) PGreaterThanOrEqual Return 1 if a != b, 0 otherwise (shorthand: patternA != patternB) PGreaterThan Return 1 if a > b, 0 otherwise (shorthand: patternA > patternB) PGreaterThanOrEqual Return 1 if a >= b, 0 otherwise (shorthand: patternA >= patternB) PLessThan Return 1 if a < b, 0 otherwise (shorthand: patternA < patternB) PLessThanOrEqual Return 1 if a <= b, 0 otherwise (shorthand: patternA <= patternB)","title":"Core"},{"location":"patterns/library/#scalar","text":"View source: scalar.py Class Function PChanged Outputs a 1 if the value of a pattern has changed. PDiff Outputs the difference between the current and previous values of an input pattern PSkipIf If skip is false, returns input ; otherwise, returns None. PNormalise Adaptively normalise input to [0..1] over a linear scale. PMap Apply an arbitrary function to an input pattern. PMapEnumerated Apply arbitrary function to input, passing a counter. PLinLin Map input from linear range [a,b] to linear range [c,d]. PLinExp Map input from linear range [a,b] to exponential range [c,d]. PRound Round input to N decimal places. PScalar Reduce tuples and lists into single scalar values, PWrap Wrap input note values within , . PIndexOf Find index of items from pattern in","title":"Scalar"},{"location":"patterns/library/#sequence","text":"View source: sequence.py Class Function PSeries Arithmetic series, beginning at start , increment by step PRange Similar to PSeries, but specify a max/step value. PGeom Geometric series, beginning at start , multiplied by step PImpulse Outputs a 1 every events, otherwise 0. PLoop Repeats a finite pattern for n repeats. PPingPong Ping-pong input pattern back and forth N times. PCreep Loop length -note segment, progressing creep notes after repeats repeats. PStutter Play each note of pattern count times. PSubsequence Returns a finite subsequence of an input pattern. PReverse Reverses a finite sequence. PReset Resets pattern whenever trigger is true PCounter Increments a counter by 1 for each zero-crossing in trigger . PCollapse Skip over any rests in input PNoRepeats Skip over repeated values in input PPad Pad pattern with rests until it reaches length length . PPadToMultiple Pad pattern with rests until its length is divisible by multiple . PArpeggiator Arpeggiator. PEuclidean Generate Euclidean rhythms. PPermut Generate every permutation of count input items. PPatternGeneratorAction Each time its pattern is exhausted, request a new pattern by calling . PSequenceAction Iterate over an array, perform a function, and repeat.","title":"Sequence"},{"location":"patterns/library/#chance","text":"View source: chance.py Class Function PWhite White noise between min and max . PBrown Brownian noise. PCoin Coin toss, returning either 0 or 1 given some probability . PWalk Random walk around list. PChoice Pick a random element from values , weighted by optional weights . PSample Pick multiple random elements from values , weighted by optional weights , PShuffle Shuffled list. PShuffleInput Every n steps, take n values from pattern and reorder. PSkip Skip events with some probability, 1 - . PFlipFlop flip a binary bit with some probability. PSwitchOne Capture length input values; loop, repeatedly switching two adjacent values.","title":"Chance"},{"location":"patterns/library/#tonal","text":"View source: tonal.py Class Function PDegree Map scale index to MIDI notes in . PFilterByKey Filter notes based on their presence in . PNearestNoteInKey Return the nearest note in . PMidiNoteToFrequency Map MIDI note to frequency value.","title":"Tonal"},{"location":"patterns/library/#static","text":"View source: static.py Class Function PGlobals Static global value identified by a string. PCurrentTime Returns the position (in beats) of the current timeline.","title":"Static"},{"location":"patterns/library/#fade","text":"View source: fade.py Class Function PFadeNotewise Fade a pattern in/out by introducing notes at a gradual rate. PFadeNotewiseRandom Fade a pattern in/out by gradually introducing random notes.","title":"Fade"},{"location":"patterns/library/#markov","text":"View source: markov.py Class Function PMarkov First-order Markov chain generator.","title":"Markov"},{"location":"patterns/library/#lsystem","text":"View source: lsystem.py Class Function PLSystem integer sequence derived from Lindenmayer systems","title":"Lsystem"},{"location":"patterns/library/#warp","text":"View source: warp.py Class Function PWInterpolate Requests a new target warp value from pattern every length beats PWSine Sinosoidal warp, period length beats, amplitude +/- . PWRallantando Exponential deceleration to times the current tempo over length beats.","title":"Warp"},{"location":"timelines/","text":"Timelines A Timeline schedules and executes events following a clock. By default, a Timeline creates its own internal clock at a specified tempo: timeline = iso . Timeline ( 120 ) timeline . run () You can set and query the tempo using the tempo property: >>> timeline . tempo = 140 >>> print ( timeline . tempo ) 140 Sync from clock in A Timeline can be synchronised from an external MIDI clock: midi_in = MidiInputDevice () timeline = iso . Timeline ( clock_source = midi_in ) timeline . run () MIDI start and stop events will be followed. Querying the timeline's tempo will give an estimate of the current bpm based on a moving average. Sync to clock out You can also drive external MIDI clocks from a Timeline, by specifying the send_clock argument when creating the output device. output_device = iso . MidiOutputDevice ( send_clock = True ) timeline = iso . Timeline ( 120 , output_device = output_device ) timeline . run () Scheduling events Scheduling events is done by passing a dict to the Timeline.schedule() method, which creates a new Track on the timeline. A timeline can have an unlimited number of tracks (unless you specify a limit with the max_tracks property). #-------------------------------------------------------------------------------- # Play a series of 5 notes with random velocities. # Delay by 1 beat before playback. #-------------------------------------------------------------------------------- timeline = iso . Timeline ( 120 ) timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 67 , 72 , 77 , 84 ], 1 ), \"duration\" : 0.5 , \"amplitude\" : iso . PWhite ( 0 , 128 ) }, delay = 1 ) timeline . run () Scheduling can be quantized or delayed by passing args to the schedule() method: quantize=N : quantize to the next N beats before beginning playback. For example, quantize=1 will quantize to the next beat. quantize=0.25 will quantize to a quarter-beat. delay=N : delay by N beats before beginning playback. If quantize and delay are both specified, quantization is applied, and the event is scheduled delay beats after the quantization time. To limit the number of iterations of an event, pass the count property: timeline.schedule({ \"note\": iso.PSeries(0, 1) + 60 }, count=4) Clock resolution and accuracy isobar-ext's internal clock by default has a resolution of 480 ticks per beat (PPQN), which equates to a timing precision of 1ms at 120bpm. High-precision scheduling in Python is inherently limited by Python's global interpreter lock (GIL), which means that sub-millisecond accuracy is unfortunately not possible. The good news is that, when using Python 3+, jitter is pretty low: the unit test suite verifies that the host device is able to keep time to +/- 1ms, and passes on Linux and macOS. Nonlinear time Time warping and nonlinear time is a work in progress.","title":"About timelines"},{"location":"timelines/#timelines","text":"A Timeline schedules and executes events following a clock. By default, a Timeline creates its own internal clock at a specified tempo: timeline = iso . Timeline ( 120 ) timeline . run () You can set and query the tempo using the tempo property: >>> timeline . tempo = 140 >>> print ( timeline . tempo ) 140","title":"Timelines"},{"location":"timelines/#sync-from-clock-in","text":"A Timeline can be synchronised from an external MIDI clock: midi_in = MidiInputDevice () timeline = iso . Timeline ( clock_source = midi_in ) timeline . run () MIDI start and stop events will be followed. Querying the timeline's tempo will give an estimate of the current bpm based on a moving average.","title":"Sync from clock in"},{"location":"timelines/#sync-to-clock-out","text":"You can also drive external MIDI clocks from a Timeline, by specifying the send_clock argument when creating the output device. output_device = iso . MidiOutputDevice ( send_clock = True ) timeline = iso . Timeline ( 120 , output_device = output_device ) timeline . run ()","title":"Sync to clock out"},{"location":"timelines/#scheduling-events","text":"Scheduling events is done by passing a dict to the Timeline.schedule() method, which creates a new Track on the timeline. A timeline can have an unlimited number of tracks (unless you specify a limit with the max_tracks property). #-------------------------------------------------------------------------------- # Play a series of 5 notes with random velocities. # Delay by 1 beat before playback. #-------------------------------------------------------------------------------- timeline = iso . Timeline ( 120 ) timeline . schedule ({ \"note\" : iso . PSequence ([ 60 , 67 , 72 , 77 , 84 ], 1 ), \"duration\" : 0.5 , \"amplitude\" : iso . PWhite ( 0 , 128 ) }, delay = 1 ) timeline . run () Scheduling can be quantized or delayed by passing args to the schedule() method: quantize=N : quantize to the next N beats before beginning playback. For example, quantize=1 will quantize to the next beat. quantize=0.25 will quantize to a quarter-beat. delay=N : delay by N beats before beginning playback. If quantize and delay are both specified, quantization is applied, and the event is scheduled delay beats after the quantization time. To limit the number of iterations of an event, pass the count property: timeline.schedule({ \"note\": iso.PSeries(0, 1) + 60 }, count=4)","title":"Scheduling events"},{"location":"timelines/#clock-resolution-and-accuracy","text":"isobar-ext's internal clock by default has a resolution of 480 ticks per beat (PPQN), which equates to a timing precision of 1ms at 120bpm. High-precision scheduling in Python is inherently limited by Python's global interpreter lock (GIL), which means that sub-millisecond accuracy is unfortunately not possible. The good news is that, when using Python 3+, jitter is pretty low: the unit test suite verifies that the host device is able to keep time to +/- 1ms, and passes on Linux and macOS.","title":"Clock resolution and accuracy"},{"location":"timelines/#nonlinear-time","text":"Time warping and nonlinear time is a work in progress.","title":"Nonlinear time"}]}